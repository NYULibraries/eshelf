docker-defaults: &docker-defaults
  docker:
    - image: nyulibraries/circleci_docker:18.06.1-ce-git-compose-1.22.0
      environment:
        - IMAGE_NAME=eshelf
        - COMPOSE_PROJECT_NAME=eshelf
  working_directory: ~/app

setup_env_vars: &setup_env_vars
  run:
    name: Sets up environment variables
    command: |
      echo 'export BRANCH_NO_SLASH=${CIRCLE_BRANCH//\//_}' >> $BASH_ENV
      source $BASH_ENV

aws_env: &aws_env
  run:
    name: Export AWS Dev env vars
    command: |
      echo 'export AWS_ACCESS_KEY_ID=${WEB_CDN_AWS_ACCESS_KEY_ID}' >> $BASH_ENV
      echo 'export AWS_SECRET_ACCESS_KEY=${WEB_CDN_AWS_SECRET_ACCESS_KEY}' >> $BASH_ENV

auth_quay: &auth_quay
  run:
    name: Authenticate Quay
    command: |
      docker login -u "$QUAY_USERNAME" --password "$QUAY_PASSWORD" quay.io

build_docker: &build_docker
  run:
    name: Build Docker
    command: |
      export BRANCH_NO_SLASH=${CIRCLE_BRANCH//\//_}
      docker-compose build dev test
      docker-compose -f docker-compose.build.yml build

pull_docker: &pull_docker
  run:
    name: Pull Docker
    command: |
      # export BRANCH_NO_SLASH=${CIRCLE_BRANCH//\//_}
      docker pull quay.io/nyulibraries/${IMAGE_NAME}:${BRANCH_NO_SLASH} || docker pull quay.io/nyulibraries/${IMAGE_NAME}:latest
      docker pull quay.io/nyulibraries/${IMAGE_NAME}_test:${BRANCH_NO_SLASH} || docker pull quay.io/nyulibraries/${IMAGE_NAME}_test:latest

push_docker: &push_docker
  run:
    name: Push Docker
    command: |
      export BRANCH_NO_SLASH=${CIRCLE_BRANCH//\//_}
      docker push quay.io/nyulibraries/${IMAGE_NAME}:latest
      docker push quay.io/nyulibraries/${IMAGE_NAME}:${BRANCH_NO_SLASH}
      docker push quay.io/nyulibraries/${IMAGE_NAME}:${BRANCH_NO_SLASH}-${CIRCLE_SHA1}
      docker push quay.io/nyulibraries/${IMAGE_NAME}_test:latest
      docker push quay.io/nyulibraries/${IMAGE_NAME}_test:${BRANCH_NO_SLASH}
      docker push quay.io/nyulibraries/${IMAGE_NAME}_test:${BRANCH_NO_SLASH}-${CIRCLE_SHA1}

junit_reports: &junit_reports
  run:
    name: Get Junit tests from stopped container
    when: always
    command: docker cp $(docker ps -aq --filter 'label=nyulibraries.app=eshelf_test'):/app/test-results .

run_tests: &run_tests
  run:
    name: Run tests
    command: |
      docker-compose run test

hermes_deploy: &hermes_deploy
  run:
    name: Deploy via Hermes
    command: |
      export TAG=${CIRCLE_BRANCH//\//_}-${CIRCLE_SHA1}
      docker run -e HERMES_HOST -e HERMES_SECRET quay.io/nyulibraries/hermesclient:master setImage -deployment=${IMAGE_NAME}-unicorn -tag=$TAG
      docker run -e HERMES_HOST -e HERMES_SECRET quay.io/nyulibraries/hermesclient:master rolloutStatus -deployment=${IMAGE_NAME}-unicorn

get_assets: &get_assets
  run:
    name: Retrieve compiled assets from container
    command: |
      docker-compose run -d dev tail -f /dev/null
      docker cp $(docker ps -aq --filter 'label=nyulibraries.app=eshelf'):/app/public/assets .

s3_assets_deploy: &s3_assets_deploy
  aws-s3/sync:
    from: assets
    to: '${S3_URI}/eshelf'
    aws-access-key-id: WEB_CDN_AWS_ACCESS_KEY_ID
    aws-secret-access-key: WEB_CDN_AWS_SECRET_ACCESS_KEY
    arguments: |
      --include "*" \
      --delete
    overwrite: true

version: 2.1
orbs:
  aws-s3: circleci/aws-s3@1.0.11
jobs:
  test:
    <<: *docker-defaults
    steps:
      - checkout
      - setup_remote_docker
      - *setup_env_vars
      - *auth_quay
      - *pull_docker
      - *build_docker
      - *push_docker
      - *run_tests
      - *junit_reports
      - store_test_results:
          path: ~/app/test-results
      - store_artifacts:
          path: ~/app/test-results
  
  deploy-assets:
    <<: *docker-defaults
    steps:
      - checkout
      - setup_remote_docker
      - *setup_env_vars
      - *auth_quay
      - *pull_docker
      - *aws_env
      - *get_assets
      - *s3_assets_deploy
      - store_artifacts:
          path: assets

  deploy-local-dev:
    <<: *docker-defaults
    steps:
      - setup_remote_docker
      - deploy:
          name: Deploy into development via Jenkins
          command: |
            docker run --rm appropriate/curl -u $JENKINS_USERNAME:$JENKINS_API_KEY -X POST http://jenkins.library.nyu.edu/view/E-Shelf/job/Eshelf%20Development%20Deploy/build/api

  deploy-local-prod:
    <<: *docker-defaults
    steps:
      - setup_remote_docker
      - deploy:
          name: Deploy into production via Jenkins
          command: |
            docker run --rm appropriate/curl -u $JENKINS_USERNAME:$JENKINS_API_KEY -X POST http://jenkins.library.nyu.edu/view/E-Shelf/job/Eshelf%20Production%20Deploy/build/api

  deploy-local-qa:
    <<: *docker-defaults
    steps:
      - setup_remote_docker
      - deploy:
          name: Deploy into QA via Jenkins
          command: |
            docker run --rm appropriate/curl -u $JENKINS_USERNAME:$JENKINS_API_KEY -X POST http://jenkins.library.nyu.edu/view/E-Shelf/job/EShelf%20QA%20Deploy/build/api
  
  deploy-k8s:
    <<: *docker-defaults
    steps:
      - setup_remote_docker
      - <<: *auth_quay
      - <<: *hermes_deploy

workflows:
  version: 2.1
  build-test-and-deploy:
    jobs:
      - test
      - deploy-assets:
          requires:
            - test
          filters:
            branches:
              ignore: master
          context: web-cdn-aws-nyulitsdev
      - deploy-assets:
          requires:
            - test
          filters:
            branches:
              only: master
          context: web-cdn-aws-nyulits
      - deploy-local-dev:
          requires:
            - test
          filters:
            branches:
              ignore:
                - master
                - qa
      - deploy-local-qa:
          requires:
            - test
          filters:
            branches:
              only: qa
      - deploy-local-prod:
          requires:
            - test
          filters:
            branches:
              only: master
      - deploy-k8s:
          requires:
            - test
          filters:
            branches:
              ignore: master
          context: web-hermes-dev
      - deploy-k8s:
          requires:
            - test
          filters:
            branches:
              only: master
          context: web-hermes-prod
      
